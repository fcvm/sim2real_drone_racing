import os
import numpy as np
import time
import subprocess
import shutil
from imutils import paths


import rospkg





def joinAndAbsolutizePath(path1, path2):
    return os.path.abspath(os.path.join(path1, path2))




#%% Path variables


# get an instance of RosPack with the default search paths
rospack = rospkg.RosPack()
# get the file path for drone_racing
DIR_DRONE_RACING            =   rospack.get_path('drone_racing')
DIR_DRONE_RACING            =   joinAndAbsolutizePath(DIR_DRONE_RACING, 'resources/scripts')

#   The training data that is generated by this script is going to be stored here
DIR_TRAINING_DATA           =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../../../../learning/deep_drone_racing_learner/data/Training'
                                )

DIR_BACKGROUND_IMAGES       =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/iros_materials/materials/textures/train_bkgs'
                                )

DIR_GATE_MATERIALS          =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/iros_materials/materials/textures/gate_bkgs'
                                )

FILE_CURRENT_BACKGROUND_IMAGE   =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/iros_materials/materials/textures/sky.jpg'
                                )

FILE_CURRENT_ASPHALT_IMAGE  =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/iros_materials/materials/textures/asphalt.jpg'
                                )

FILE_CURRENT_GATE_MATERIAL  =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/real_world/gate/meshes/images.jpeg'
                                )

DIR_GATE_SHAPES             =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/real_world/gate/meshes/gate_shapes'
                                )

FILE_CURRENT_GATE_SHAPE_DAE =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/real_world/gate/meshes/gate.dae'
                                )

FILE_CURRENT_GATE_SHAPE_STL =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/real_world/gate/meshes/gate.stl'
                                )

FILE_RANDOM_ILLUMINATION    =   joinAndAbsolutizePath(
                                    DIR_DRONE_RACING, 
                                    '../race_track/real_world/gate/meshes/set_gate_properties.py'
                                )


#%% Parameters


numberOf_IterationsPerBackground = 1
numberOf_Loops = 2


#%% Code


def collectDataInFixedEnvironment(numberOf_IterationsPerBackground):

    dataCollectionRuns = os.listdir(DIR_TRAINING_DATA)
    dataCollectionRuns =    [ d for d in dataCollectionRuns if \
                                (os.path.isdir(os.path.join(DIR_TRAINING_DATA, d)) \
                                and 'Run' in d)
                            ]
    dataCollectionRuns = sorted(dataCollectionRuns)
    if len(dataCollectionRuns) == 0:
        index_dataCollectionRun = 0
        #first_iteration = True
    else:
        index_dataCollectionRun = int(dataCollectionRuns[-1].split("_")[-1]) + 1
    print("Setting run index to {} ".format(index_dataCollectionRun))

    for _ in range(numberOf_IterationsPerBackground):
        print("=======================")
        print("  Iteration number {}  ".format(index_dataCollectionRun))
        print("=======================")
        # set current run indexSetting up paths 
        os.system("timeout 1s rostopic pub /hummingbird/run_idx std_msgs/Int16 {}".format(index_dataCollectionRun))

        # set up simulation scenario
        print('Replacing quad for new run...')
        os.system('timeout 1s rostopic pub /hummingbird/autopilot/off std_msgs/Empty')
        # reset quad to initial position
        os.system("rosservice call /gazebo/set_model_state '{model_state: { model_name: hummingbird, pose: { position: { x: -0.5, y: 22.0 ,z: 0.2 }, orientation: {x: 0, y: 0, z: -0.707, w: 0.707 } }, twist:{ linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'")


        # start quadrotor
        print("Start quadrotor")
        os.system("timeout 1s rostopic pub /hummingbird/bridge/arm std_msgs/Bool 'True'")
        os.system("timeout 1s rostopic pub /hummingbird/autopilot/start std_msgs/Empty")
        time.sleep(3)

        # setup environment and start
        os.system("timeout 1s rostopic pub /hummingbird/setup_environment std_msgs/Empty")

        print("Collecting data...")
        time.sleep(40)

        # stop algorithm
        print("Stop collecting data")
        os.system("timeout 2s rostopic pub /hummingbird/hard_stop std_msgs/Empty")

        # increase run index by one
        index_dataCollectionRun += 1




def main():


    #   Read all the backgrounds and order them
    backgroundImages = sorted(paths.list_images(DIR_BACKGROUND_IMAGES))

    # Number of backgrounds in training
    numberOf_backgroundImages = len(backgroundImages)

    #   Read all possible gate materials
    gateMaterials = sorted(paths.list_images(DIR_GATE_MATERIALS))

    #   Read all possible gate shapes that are .stl files and remove the file extension
    gateShapes = [os.path.join(DIR_GATE_SHAPES, f.split('.')[0]) \
                for f in os.listdir(DIR_GATE_SHAPES) if f.endswith('.stl')]

    # Number of gates in training
    numberOf_gateShapes = len(gateShapes) - 1 # Last is used for testing

    if not os.path.isdir(DIR_TRAINING_DATA):
        os.makedirs(DIR_TRAINING_DATA)



    for _ in range(numberOf_Loops):
        for index_backgroundImage, backgroundImage in enumerate(backgroundImages):
            # Copy new background
            os.system("cp {} {}".format(backgroundImage, FILE_CURRENT_BACKGROUND_IMAGE))
            # Copy new asphalt
            os.system("cp {} {}".format(backgroundImages[-(index_backgroundImage+1)], FILE_CURRENT_ASPHALT_IMAGE))
            # Copy new gate background
            os.system("cp {} {}".format(gateMaterials[index_backgroundImage%9], FILE_CURRENT_GATE_MATERIAL)) # Use the first 9 for training and the last for testing
            # Copy new random gate shape
            index_GateShape = np.random.choice(numberOf_gateShapes)
            shutil.copy(gateShapes[index_GateShape] + '.stl', FILE_CURRENT_GATE_SHAPE_STL)
            shutil.copy(gateShapes[index_GateShape] + '.dae', FILE_CURRENT_GATE_SHAPE_DAE)
            # Make random illumination
            os.system(
                "python3 {} -xml_file {} -emission {} -ambient {}".format(
                    FILE_RANDOM_ILLUMINATION,
                    FILE_CURRENT_GATE_SHAPE_DAE,
                    0.1*np.random.rand(), # Gates have little emission, 0.3
                    np.random.rand() # 0.5
                )
            ) 


            print(
                "Processing Background {}/{}".format(
                    index_backgroundImage + 1, 
                    numberOf_backgroundImages
                )
            )
            time.sleep(2)


            ##################HERE######################
            # set environment
            subprocess.call("roslaunch drone_racing simulation_no_quad_gui.launch &", shell=True)
            time.sleep(10)

            collectDataInFixedEnvironment(numberOf_IterationsPerBackground)
            
            os.system("pkill -9 rviz; pkill -9 gzserver")
            time.sleep(5)



if __name__ == '__main__':
    main()